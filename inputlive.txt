0
-1
666
-90127
()
(3)
(-25)
(23 4)
(-12 -71)
(0  -10   11)
(1 -1 1 -1 1 -1 1)

(+ 10 15)
(+ (+ 1 2) 7)
(+ 10)
(+ 10 (15))
(- (- 5))
(+ x 1)
(cons 3 (2 1))
(define l1 (20 30))
(head (tail (cons 10 l1)))
(head (tail (tail l1)))
(if 1 (+ 0 1) (+ 2 3))
(if 0 (+ 0 1) (+ 2 3))
(if 2 (+ 0 1) (+ 2 3))

(define x 10)
(define z (+ (head (tail (1 2 3 4))) 10))
(+ (head (1 2 3 4)) z)
(if (< z x) (1) ())

(define diff (x y) (+ x (- y)))
(diff 10 20)
(define * (x y) (if (= x 0) 0 (+ y (* (diff x 1) y))))
(* 4 5)
(define * (x y) (if (= x 0) 0
                   (if (< 0 x) (+ y (* (diff x 1) y))
                               (diff (* (+ x 1) y) y)
                   )
                )
)
(* 4 5)
(* -4 5)
(* 4 -5)
(* -4 -5)
(define quadrat (x) (* x x))
(quadrat 5)
(define / (x y) (if (< y x) (+ 1 (/ (diff x y) y))
                            (if (= x y) 1 0)))
(/ 21 4)
(define sum-first (n) (if (< 0 n) (+ n (sum-first (diff n 1))) 0))
(sum-first 10)
(define mitjana (n) (/ (sum-first n) n))
(mitjana 10)

(define <= (a b) (or (< a b) (= a b)))
(define >= (a b) (or (< b a) (= a b)))
(define == (a b) (= a b))
(define > (a b) (< b a))
(and (<= x x) (>= x z))
(not (== x z))
(> z x)
(<=> z x)

((+ x z) -10 (head ((diff z x))))
(1 (head (cons -3 ())) (- (/ z x)) (if (< x 5) () 99))
(1 (head (cons -3 ())) (- (/ z x)) (if (< x 5) 99 ()))

(define abc (+ x z))
(define xyz (* abc 10))
(* abc xyz)
(define abc 123)
(* abc xyz)
(define fun (y) (= y (* (/ y x) x)))
(fun 10)
****